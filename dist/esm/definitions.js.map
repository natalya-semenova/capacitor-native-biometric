{"version":3,"file":"definitions.js","sourceRoot":"","sources":["../../src/definitions.ts"],"names":[],"mappings":"AAAA,MAAM,CAAN,IAAY,YAeX;AAfD,WAAY,YAAY;IACtB,eAAe;IACf,+CAAQ,CAAA;IACR,MAAM;IACN,uDAAY,CAAA;IACZ,MAAM;IACN,qDAAW,CAAA;IACX,UAAU;IACV,6DAAe,CAAA;IACf,UAAU;IACV,6EAAuB,CAAA;IACvB,UAAU;IACV,6EAAuB,CAAA;IACvB,UAAU;IACV,uDAAY,CAAA;AACd,CAAC,EAfW,YAAY,KAAZ,YAAY,QAevB;AA+DD;;;GAGG;AACH,MAAM,CAAN,IAAY,kBAcX;AAdD,WAAY,kBAAkB;IAC5B,6EAAiB,CAAA;IACjB,+FAA0B,CAAA;IAC1B,2EAAgB,CAAA;IAChB,iGAA2B,CAAA;IAC3B,+FAA0B,CAAA;IAC1B,8FAA0B,CAAA;IAC1B,wEAAe,CAAA;IACf,kFAAoB,CAAA;IACpB,kFAAoB,CAAA;IACpB,oFAAqB,CAAA;IACrB,8EAAkB,CAAA;IAClB,0EAAgB,CAAA;IAChB,8EAAkB,CAAA;AACpB,CAAC,EAdW,kBAAkB,KAAlB,kBAAkB,QAc7B","sourcesContent":["export enum BiometryType {\n  // Android, iOS\n  NONE = 0,\n  // iOS\n  TOUCH_ID = 1,\n  // iOS\n  FACE_ID = 2,\n  // Android\n  FINGERPRINT = 3,\n  // Android\n  FACE_AUTHENTICATION = 4,\n  // Android\n  IRIS_AUTHENTICATION = 5,\n  // Android\n  MULTIPLE = 6,\n}\n\nexport interface Credentials {\n  username: string;\n  password: string;\n}\n\nexport interface IsAvailableOptions {\n  /**\n   * Specifies if should fallback to passcode authentication if biometric authentication is not available.\n   */\n  useFallback: boolean;\n}\n\nexport interface AvailableResult {\n  isAvailable: boolean;\n  biometryType: BiometryType;\n  errorCode?: number;\n  isDeviceSecure: boolean;\n}\n\nexport interface BiometricOptions {\n  reason?: string;\n  title?: string;\n  subtitle?: string;\n  description?: string;\n  negativeButtonText?: string;\n  /**\n   * Specifies if should fallback to passcode authentication if biometric authentication fails.\n   */\n  useFallback?: boolean;\n  /**\n   * Only for iOS.\n   * Set the text for the fallback button in the authentication dialog.\n   * If this property is not specified, the default text is set by the system.\n   */\n  fallbackTitle?: string;\n  /**\n   * Only for Android.\n   * Set a maximum number of attempts for biometric authentication. The maximum allowed by android is 5.\n   * @default 1\n   */\n  maxAttempts?: number;\n  /**\n   * Only for Android.\n   */\n  disableConfirmationRequired?: boolean;\n}\n\nexport interface GetCredentialOptions {\n  server: string;\n}\n\nexport interface SetCredentialOptions {\n  username: string;\n  password: string;\n  server: string;\n}\n\nexport interface DeleteCredentialOptions {\n  server: string;\n}\n\n/**\n * Keep this in sync with BiometricAuthError in README.md\n * Update whenever `convertToPluginErrorCode` functions are modified\n */\nexport enum BiometricAuthError {\n  UNKNOWN_ERROR = 0,\n  BIOMETRICS_UNAVAILABLE = 1,\n  USER_LOCKOUT = 2,\n  BIOMETRICS_NOT_ENROLLED = 3,\n  USER_TEMPORARY_LOCKOUT = 4,\n  AUTHENTICATION_FAILED = 10,\n  APP_CANCEL = 11,\n  INVALID_CONTEXT = 12,\n  NOT_INTERACTIVE = 13,\n  PASSCODE_NOT_SET = 14,\n  SYSTEM_CANCEL = 15,\n  USER_CANCEL = 16,\n  USER_FALLBACK = 17,\n}\n\nexport interface NativeBiometricPlugin {\n  /**\n   * Checks if biometric authentication hardware is available.\n   * @param {IsAvailableOptions} [options]\n   * @returns {Promise<AvailableResult>}\n   * @memberof NativeBiometricPlugin\n   * @since 1.0.0\n   */\n  isAvailable(options?: IsAvailableOptions): Promise<AvailableResult>;\n  /**\n   * Prompts the user to authenticate with biometrics.\n   * @param {BiometricOptions} [options]\n   * @returns {Promise<any>}\n   * @memberof NativeBiometricPlugin\n   * @since 1.0.0\n   */\n  verifyIdentity(options?: BiometricOptions): Promise<void>;\n  /**\n   * Gets the stored credentials for a given server.\n   * @param {GetCredentialOptions} options\n   * @returns {Promise<Credentials>}\n   * @memberof NativeBiometricPlugin\n   * @since 1.0.0\n   */\n  getCredentials(options: GetCredentialOptions): Promise<Credentials>;\n  /**\n   * Stores the given credentials for a given server.\n   * @param {SetCredentialOptions} options\n   * @returns {Promise<any>}\n   * @memberof NativeBiometricPlugin\n   * @since 1.0.0\n   */\n  setCredentials(options: SetCredentialOptions): Promise<void>;\n  /**\n   * Deletes the stored credentials for a given server.\n   * @param {DeleteCredentialOptions} options\n   * @returns {Promise<any>}\n   * @memberof NativeBiometricPlugin\n   * @since 1.0.0\n   */\n  deleteCredentials(options: DeleteCredentialOptions): Promise<void>;\n}\n"]}